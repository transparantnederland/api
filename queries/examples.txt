// Cypher Scratchpad -- disregard//







// People who were associated with VVD *at the same time*

MATCH (w:`tnl:Organization`) WHERE w.name = 'VVD'

// Find corresponding concept node:
OPTIONAL MATCH w <-[:`=`]- (wConcept:`=`)
WITH coalesce(w, wConcept) AS w

// Find related persons (starting from concept node, or direct):
MATCH (w)-[`=` * 0 .. 1]-()-[:`tnl:related` * 2]-(p:`tnl:Person`)

WITH collect(p) AS ps
UNWIND ps AS p1
UNWIND ps AS p2
MATCH p1, p2
WHERE
  (coalesce(p1.validSinceTimestamp, -99999999999) <= coalesce(p2.validUntilTimestamp, timestamp() / 1000)) AND
  (coalesce(p1.validUntilTimestamp, timestamp() / 1000) >= coalesce(p2.validSinceTimestamp, -99999999999)) AND
  (p1.id <> p2.id)
RETURN DISTINCT p1.name, p2.name






// Organizations linked to people linked to VVD
MATCH (b:_) WHERE b.name = 'VVD'
OPTIONAL MATCH b <-[:`=`]- (bConcept:`=`)
WITH coalesce(bConcept, b) AS b
MATCH (b)-[`=` * 0 .. 1]-()-[:`tnl:related` * 2]-(p:`tnl:Person`)
OPTIONAL MATCH p <-[:`=`]-(pConcept:`=`)
WITH coalesce(pConcept, p) AS p
MATCH (p)-[`=` * 0 .. 1]-()-[:`tnl:related` * 2]-(o:_)
OPTIONAL MATCH (o)-[:`=i`]->(oConcept:`=`)-[:`=`]->(oo)
RETURN o, oo, oConcept


// Person linked to VVD
MATCH (b:_) WHERE b.name = 'VVD'
OPTIONAL MATCH b <-[:`=`]- (bConcept:`=`)
WITH coalesce(bConcept, b) AS b
MATCH (b)-[`=` * 0 .. 1]-()-[:`tnl:related` * 2]-(p:`tnl:Person`)
RETURN p, count(p)





MATCH (person:`tnl:Person`) WHERE person.id = "urn:hgid:nevenfuncties/NyXL7RdbH2ze"
OPTIONAL MATCH (person) <-[:`=`]- (concepts:`=`)
WITH coalesce(concepts, person) AS person
MATCH (person)-[`=` * 0 .. 1]-()-[rel:`tnl:related`|`tnl:member` * 2]-(orgs)
WHERE labels(orgs)[1] IN ["tnl:Organization","tnl:Public","tnl:PoliticalParty","tnl:Commercial","tnl:NonProfit"]
RETURN orgs,rel

MATCH (person:`tnl:Person`) WHERE person.id = "urn:hgid:nevenfuncties/NyXL7RdbH2ze"
OPTIONAL MATCH (person) <-[:`=`]- (concepts:`=`)
WITH coalesce(concepts, person) AS person
MATCH (person) -[r0:`tnl:related`|`tnl:member`]-> (r:_Rel) -[r1:`tnl:related`|`tnl:member`]-> (orgs)
WHERE labels(orgs)[1] IN ["tnl:Organization","tnl:Public","tnl:PoliticalParty","tnl:Commercial","tnl:NonProfit"]
RETURN orgs,r.type

MATCH ()-[r]-() return r limit 10

MATCH (n:_)-[r0]->(r:_Rel)-[r1]->(m:_)`

MATCH (n:_) -[r0:`tnl:related`|`tnl:member`]-> (r:_Rel) -[r1:`tnl:related`|`tnl:member`]-> (m:_)
return r limit 10



-----------------

/ from ID to relations back to people
// People related to people through orgs they are or have been related to

single: urn:hgid:nevenfuncties/VJX7PJFZS3Mx
multiple: urn:hgid:overheidsorganisaties/113479

MATCH (person:_) WHERE person.id = "urn:hgid:overheidsorganisaties/113479"
// Find corresponding concept node:
OPTIONAL MATCH (person) <- [:`=`] - (conceptP:`=`)
WITH coalesce(conceptP, person) AS either
return person


OPTIONAL MATCH (person1:_) <- [:`=`] - (either)
WITH coalesce(person1, person) AS per
return per


// find organizations
MATCH (person)-[`=` * 0 .. 1]-()-[:`tnl:member`|`tnl:related` * 2]-(orgs)
WHERE labels(orgs)[1] IN ["tnl:Organization", "tnl:Public"]

OPTIONAL MATCH (orgs) <- [:`=`] - (conceptO:`=`)
WITH coalesce(orgs, conceptO ) AS orgs

// and people related to these
MATCH (orgs) <-[r0:`tnl:member`|`tnl:related`]-> (r:_Rel) -[r1:`tnl:member`|`tnl:related`]- (people:`tnl:Person`)


// now, for each org(concept!!) find the people who had «relations» with them at the same time as <person>..

return people, orgs, r.type, person.name

MATCH (n) WHERE n.id = "urn:hgid:pdc/01894_7ff660189"
OPTIONAL MATCH (n) <-[:`=`]- (:`=`) <-[:`=i`]- (ni)
WITH coalesce(ni, n) AS n

MATCH (n) -[:`=i`|`tnl:related`|`tnl:member`|`tnl:boardmember`|`tnl:advisor`|`tnl:commissioner`|`tnl:employee`|`tnl:lobbyist`|`tnl:spokesperson`*1..2]- (r:_Rel) -[:`tnl:related`|`tnl:member`|`tnl:boardmember`|`tnl:advisor`|`tnl:commissioner`|`tnl:employee`|`tnl:lobbyist`|`tnl:spokesperson`]- (m) WHERE labels(m)[1] IN ['tnl:Organization','tnl:Commercial','tnl:Public']

RETURN m.id AS id, n.id AS to;

// group query

MATCH (org) WHERE org.id = "urn:hgid:pdc/shellnederland"
OPTIONAL MATCH (org) <-[:`=`]- (concept:`=`) <-[:`=i`]- (norg)
WITH coalesce(norg, org) AS org, [] AS network, [] AS relations, [] AS relations_to

OPTIONAL MATCH (org) -[:`=i`|`tnl:parent` * 1..2]- (pr:_Rel) <-[:`tnl:parent`]- (parent), (parent) -[:`=i`|`tnl:parent` * 1..2]- (pcr:_Rel) -[:`tnl:parent`]-> (siblings)
OPTIONAL MATCH (org) -[:`=i`|`tnl:parent` * 1..2]- (cr:_Rel) -[:`tnl:parent`]-> (children)

WITH network + org.id + siblings.id + children.id AS network, relations + pr.type + pcr.type + cr.type AS relations, relations_to + pr.to + pcr.to + cr.to AS relations_to
UNWIND network AS id
UNWIND relations AS type
UNWIND relations_to AS to

RETURN DISTINCT id, type, to;
